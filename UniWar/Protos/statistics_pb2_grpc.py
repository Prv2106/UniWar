# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import statistics_pb2 as statistics__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in statistics_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class StatisticsServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.send_statistics = channel.unary_unary(
                '/statistics.StatisticsService/send_statistics',
                request_serializer=statistics__pb2.StatisticsCollection.SerializeToString,
                response_deserializer=statistics__pb2.Response.FromString,
                _registered_method=True)
        self.sign_in = channel.unary_unary(
                '/statistics.StatisticsService/sign_in',
                request_serializer=statistics__pb2.SignInCredentials.SerializeToString,
                response_deserializer=statistics__pb2.Response.FromString,
                _registered_method=True)
        self.sign_up = channel.unary_unary(
                '/statistics.StatisticsService/sign_up',
                request_serializer=statistics__pb2.SignUpCredentials.SerializeToString,
                response_deserializer=statistics__pb2.Response.FromString,
                _registered_method=True)
        self.username_check = channel.unary_unary(
                '/statistics.StatisticsService/username_check',
                request_serializer=statistics__pb2.Username.SerializeToString,
                response_deserializer=statistics__pb2.Response.FromString,
                _registered_method=True)
        self.get_statistics = channel.unary_unary(
                '/statistics.StatisticsService/get_statistics',
                request_serializer=statistics__pb2.StatisticRequest.SerializeToString,
                response_deserializer=statistics__pb2.StatisticsResponse.FromString,
                _registered_method=True)
        self.get_games = channel.unary_unary(
                '/statistics.StatisticsService/get_games',
                request_serializer=statistics__pb2.Username.SerializeToString,
                response_deserializer=statistics__pb2.GameInfoList.FromString,
                _registered_method=True)
        self.new_game = channel.unary_unary(
                '/statistics.StatisticsService/new_game',
                request_serializer=statistics__pb2.Username.SerializeToString,
                response_deserializer=statistics__pb2.NewGameResponse.FromString,
                _registered_method=True)
        self.end_game = channel.unary_unary(
                '/statistics.StatisticsService/end_game',
                request_serializer=statistics__pb2.EndGameRequest.SerializeToString,
                response_deserializer=statistics__pb2.Response.FromString,
                _registered_method=True)


class StatisticsServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def send_statistics(self, request, context):
        """da richiamare ogni volta che si conclude una fase di attacco da parte di un giocatore
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sign_in(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sign_up(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def username_check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_statistics(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_games(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def new_game(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def end_game(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StatisticsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'send_statistics': grpc.unary_unary_rpc_method_handler(
                    servicer.send_statistics,
                    request_deserializer=statistics__pb2.StatisticsCollection.FromString,
                    response_serializer=statistics__pb2.Response.SerializeToString,
            ),
            'sign_in': grpc.unary_unary_rpc_method_handler(
                    servicer.sign_in,
                    request_deserializer=statistics__pb2.SignInCredentials.FromString,
                    response_serializer=statistics__pb2.Response.SerializeToString,
            ),
            'sign_up': grpc.unary_unary_rpc_method_handler(
                    servicer.sign_up,
                    request_deserializer=statistics__pb2.SignUpCredentials.FromString,
                    response_serializer=statistics__pb2.Response.SerializeToString,
            ),
            'username_check': grpc.unary_unary_rpc_method_handler(
                    servicer.username_check,
                    request_deserializer=statistics__pb2.Username.FromString,
                    response_serializer=statistics__pb2.Response.SerializeToString,
            ),
            'get_statistics': grpc.unary_unary_rpc_method_handler(
                    servicer.get_statistics,
                    request_deserializer=statistics__pb2.StatisticRequest.FromString,
                    response_serializer=statistics__pb2.StatisticsResponse.SerializeToString,
            ),
            'get_games': grpc.unary_unary_rpc_method_handler(
                    servicer.get_games,
                    request_deserializer=statistics__pb2.Username.FromString,
                    response_serializer=statistics__pb2.GameInfoList.SerializeToString,
            ),
            'new_game': grpc.unary_unary_rpc_method_handler(
                    servicer.new_game,
                    request_deserializer=statistics__pb2.Username.FromString,
                    response_serializer=statistics__pb2.NewGameResponse.SerializeToString,
            ),
            'end_game': grpc.unary_unary_rpc_method_handler(
                    servicer.end_game,
                    request_deserializer=statistics__pb2.EndGameRequest.FromString,
                    response_serializer=statistics__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'statistics.StatisticsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('statistics.StatisticsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class StatisticsService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def send_statistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/send_statistics',
            statistics__pb2.StatisticsCollection.SerializeToString,
            statistics__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sign_in(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/sign_in',
            statistics__pb2.SignInCredentials.SerializeToString,
            statistics__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sign_up(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/sign_up',
            statistics__pb2.SignUpCredentials.SerializeToString,
            statistics__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def username_check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/username_check',
            statistics__pb2.Username.SerializeToString,
            statistics__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_statistics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/get_statistics',
            statistics__pb2.StatisticRequest.SerializeToString,
            statistics__pb2.StatisticsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_games(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/get_games',
            statistics__pb2.Username.SerializeToString,
            statistics__pb2.GameInfoList.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def new_game(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/new_game',
            statistics__pb2.Username.SerializeToString,
            statistics__pb2.NewGameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def end_game(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/statistics.StatisticsService/end_game',
            statistics__pb2.EndGameRequest.SerializeToString,
            statistics__pb2.Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
